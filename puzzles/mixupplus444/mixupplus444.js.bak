// 座標.
var X = 0;
var Y = 1;

// 回転の指定.
var axis = 0;
var deg = 1;

// class名 RC1の位置.
var facePos = 0;
var faceKind = 1;

var Cube = function(){
    var $faces = $('#faces');

    var faceName = ['U','F','L','B','R','D'];

    var mag = 200; // 拡大率.
    var r = mag; // 半径.
    var facePosition = {
        // rotateZ,translateZ,rotateY,rotateX
        "U":[0,0,90,[0,0,1]],
        "F":[90,0,0,[0,0,1]],
        "L":[90,0,-90,[0,0,1]],
        "B":[90,0,-180,[0,0,1]],
        "R":[90,0,-270,[0,0,1]],
        "D":[0,0,-90,[0,0,1]]
    };


    var faceColor = {
        'U':"#FFFFFF",
        'F':"#FF0000",
        'L':"#00FF00",
        'R':"#FFFF00",
        "B":"#FFAA00",
        "D":"#0000FF"
    }

    var svgDataMixUpPlus444 = [
        "M394,135.757c0,3.3-2.7,6-6,6h-55.879c-3.3,0-8.7,0-12,0h-55.879c-3.3,0-6-2.7-6-6V79.878			c0-3.3,0-8.7,0-12V12c0-3.3,2.7-6,6-6h55.879c3.3,0,8.7,0,12,0H388c3.3,0,6,2.7,6,6v55.878c0,3.3,0,8.7,0,12V135.757z",
        "M394,188c0,3.3-2.7,6-6,6h-49.879c-3.3,0-6-2.7-6-6v-28.243c0-3.3,2.7-6,6-6H388			c3.3,0,6,2.7,6,6V188z",
        "M394,240.241c0,3.3-2.7,6-6,6h-49.879c-3.3,0-6-2.7-6-6v-28.24c0-3.3,2.7-6,6-6H388			c3.3,0,6,2.7,6,6V240.241z",
        "M320.121,240.241c0,3.3-2.7,6-6,6h-49.88c-3.3,0-6-2.7-6-6V212c0-3.3,2.7-6,6-6h49.88			c3.3,0,6,2.7,6,6V240.241z",
        "M320.121,188c0,3.3-2.7,6-6,6h-49.88c-3.3,0-6-2.7-6-6v-28.243c0-3.3,2.7-6,6-6h49.88			c3.3,0,6,2.7,6,6V188z",
        "M246.241,188c0,3.3-2.7,6-6,6h-28.24c-3.3,0-6-2.7-6-6v-28.242c0-3.3,2.7-6,6-6h28.24			c3.3,0,6,2.7,6,6V188z",
        "M394,388c0,3.3-2.7,6-6,6h-55.879c-3.3,0-8.7,0-12,0h-55.879c-3.3,0-6-2.7-6-6v-55.879			c0-3.3,0-8.7,0-12v-55.879c0-3.3,2.7-6,6-6h55.879c3.3,0,8.7,0,12,0H388c3.3,0,6,2.7,6,6v55.879c0,3.3,0,8.7,0,12V388z",
        "M246.241,388c0,3.3-2.7,6-6,6h-28.24c-3.3,0-6-2.7-6-6v-49.879c0-3.3,2.7-6,6-6h28.24			c3.3,0,6,2.7,6,6V388z",
        "M194,388c0,3.3-2.7,6-6,6h-28.24c-3.3,0-6-2.7-6-6v-49.879c0-3.3,2.7-6,6-6H188			c3.3,0,6,2.7,6,6V388z",
        "M194,314.121c0,3.3-2.7,6-6,6h-28.241c-3.3,0-6-2.7-6-6v-49.88c0-3.3,2.7-6,6-6H188			c3.3,0,6,2.7,6,6V314.121z",
        "M246.241,314.121c0,3.3-2.7,6-6,6H212c-3.3,0-6-2.7-6-6v-49.88c0-3.3,2.7-6,6-6h28.241			c3.3,0,6,2.7,6,6V314.121z",
        "M246.241,240.241c0,3.3-2.7,6-6,6h-28.24c-3.3,0-6-2.7-6-6v-28.24c0-3.3,2.7-6,6-6h28.24			c3.3,0,6,2.7,6,6V240.241z",
        "M141.759,388c0,3.3-2.7,6-6,6H79.878c-3.3,0-8.7,0-12,0H12.001c-3.3,0-6-2.7-6-6v-55.879			c0-3.3,0-8.7,0-12v-55.879c0-3.3,2.7-6,6-6h55.876c3.3,0,8.7,0,12,0h55.881c3.3,0,6,2.7,6,6v55.879c0,3.3,0,8.7,0,12V388z",
        "M67.877,240.241c0,3.3-2.7,6-6,6H12c-3.3,0-6-2.7-6-6V212c0-3.3,2.7-6,6-6h49.877			c3.3,0,6,2.7,6,6V240.241z",
        "M67.878,187.999c0,3.3-2.7,6-6,6H12c-3.3,0-6-2.7-6-6v-28.241c0-3.3,2.7-6,6-6h49.878			c3.3,0,6,2.7,6,6V187.999z",
        "M141.758,187.999c0,3.3-2.7,6-6,6h-49.88c-3.3,0-6-2.7-6-6v-28.241c0-3.3,2.7-6,6-6h49.88			c3.3,0,6,2.7,6,6V187.999z",
        "M141.758,240.241c0,3.3-2.7,6-6,6H85.879c-3.3,0-6-2.7-6-6v-28.24c0-3.3,2.7-6,6-6h49.879			c3.3,0,6,2.7,6,6V240.241z",
        "M194,240.241c0,3.3-2.7,6-6,6H159.76c-3.3,0-6-2.7-6-6v-28.24c0-3.3,2.7-6,6-6H188			c3.3,0,6,2.7,6,6V240.241z",
        "M141.757,135.757c0,3.3-2.7,6-6,6H79.878c-3.3,0-8.7,0-12,0H12.001c-3.3,0-6-2.7-6-6V79.878			c0-3.3,0-8.7,0-12V12.001c0-3.3,2.7-6,6-6h55.876c3.3,0,8.7,0,12,0h55.879c3.3,0,6,2.7,6,6v55.876c0,3.3,0,8.7,0,12V135.757z",
        "M193.999,61.878c0,3.3-2.7,6-6,6h-28.241c-3.3,0-6-2.7-6-6V12c0-3.3,2.7-6,6-6h28.241			c3.3,0,6,2.7,6,6V61.878z",
        "M246.241,61.877c0,3.3-2.7,6-6,6h-28.24c-3.3,0-6-2.7-6-6V12c0-3.3,2.7-6,6-6h28.24			c3.3,0,6,2.7,6,6V61.877z",
        "M246.241,135.756c0,3.3-2.7,6-6,6h-28.24c-3.3,0-6-2.7-6-6V85.879c0-3.3,2.7-6,6-6h28.24			c3.3,0,6,2.7,6,6V135.756z",
        "M193.999,135.758c0,3.3-2.7,6-6,6h-28.241c-3.3,0-6-2.7-6-6v-49.88c0-3.3,2.7-6,6-6h28.241			c3.3,0,6,2.7,6,6V135.758z",
        "M193.999,187.999c0,3.3-2.7,6-6,6h-28.241c-3.3,0-6-2.7-6-6v-28.241c0-3.3,2.7-6,6-6h28.241			c3.3,0,6,2.7,6,6V187.999z"
    ];
    var generateFaceType = {
        "U":svgDataMixUpPlus444,
        "F":svgDataMixUpPlus444,
        "L":svgDataMixUpPlus444,
        "B":svgDataMixUpPlus444,
        "R":svgDataMixUpPlus444,
        "D":svgDataMixUpPlus444
    };

    var availableTurn = ["F","I","L","K","R","J","B","N","X","Y","Z"]; // 回転名を変更するときはturnTableも変更すること.
    var turnAxesAry = [
        {"axis":["1,-1,1"]  ,"offset":[0,34,0]  ,"rotate":120},
        {"axis":["-1,1,-1"] ,"offset":[0,-34,0] ,"rotate":120},
        {"axis":["-1,-1,1"] ,"offset":[0,34,0]  ,"rotate":120},
        {"axis":["1,1,-1"]  ,"offset":[0,-34,0] ,"rotate":120},
        {"axis":["1,-1,-1"] ,"offset":[0,34,0]  ,"rotate":120},
        {"axis":["-1,1,1"]  ,"offset":[0,-34,0] ,"rotate":120},
        {"axis":["-1,-1,-1"],"offset":[0,34,0]  ,"rotate":120},
        {"axis":["1,1,1"]   ,"offset":[0,-34,0] ,"rotate":120},
        {"axis":["1,0,0"]   ,"offset":[0,0,0]   ,"rotate":180},
        {"axis":["0,0,1"]   ,"offset":[0,0,0]   ,"rotate":180},
        {"axis":["0,-1,0"]  ,"offset":[0,0,0]   ,"rotate":180}];
    var turnAxes = {};
    for( var i = 0; i < turnAxesAry.length; i++ )turnAxes[availableTurn[i]] = turnAxesAry[i];


    var turnTable = [
        ["U2","F0","R6"],["D4","L4","B2"],["U4","L0","F6"],["D2","B4","R2"],
        ["U0","R0","B6"],["D6","F4","L2"],["U6","B0","L6"],["D0","R4","F2"]
    ];

    var currentAnimation = {};
    var currentOperation = "";
    var currentTargetStickers = null;

    var parseTurnOperation = function( turnOperation ){
        var operation = {};
        operation["layer"] = turnOperation[1];
        operation["turn"] = turnOperation[0];
        operation["isPrime"] = (turnOperation[2] == "P" );
        return operation;
    }
    var turnTable = {
        'layer2': {
            'I': [[['D', 'L', 'B'],['DF06', 'DF20', 'DF21', 'DF10', 'LF00', 'LF07', 'LF08', 'LF04', 'BF13', 'BF18', 'BF19', 'BF00']]],
            'F': [[['U', 'F', 'R'],['UF02', 'UF18', 'UF19', 'UF06', 'FF10', 'FF17', 'FF18', 'FF14', 'RF03', 'RF08', 'RF09', 'RF10']]],
            'N': [[['D', 'R', 'F'],['DF14', 'DF16', 'DF17', 'DF02', 'RF00', 'RF07', 'RF08', 'RF04', 'FF13', 'FF18', 'FF19', 'FF00']]],
            'L': [[['U', 'L', 'F'],['UF06', 'UF20', 'UF21', 'UF10', 'LF10', 'LF17', 'LF18', 'LF14', 'FF03', 'FF08', 'FF09', 'FF10']]],
            'J': [[['D', 'F', 'L'],['DF10', 'DF22', 'DF23', 'DF14', 'FF00', 'FF07', 'FF08', 'FF04', 'LF13', 'LF18', 'LF19', 'LF00']]],
            'R': [[['U', 'R', 'B'],['UF14', 'UF16', 'UF17', 'UF02', 'RF10', 'RF17', 'RF18', 'RF14', 'BF03', 'BF08', 'BF09', 'BF10']]],
            'B': [[['U', 'B', 'L'],['UF10', 'UF22', 'UF23', 'UF14', 'BF10', 'BF17', 'BF18', 'BF14', 'LF03', 'LF08', 'LF09', 'LF10']]],
            'K': [[['D', 'B', 'R'],['DF02', 'DF18', 'DF19', 'DF06', 'BF00', 'BF07', 'BF08', 'BF04', 'RF13', 'RF18', 'RF19', 'RF00']]]
        },
        'layer1': {
            'K': [[['D', 'B', 'R'],['DF03', 'DF04', 'DF05', 'BF01', 'BF02', 'BF03', 'RF14', 'RF15', 'RF16']]],
            'L': [[['U', 'L', 'F'],["UF07", "UF08", "UF09", "LF11", "LF12", "LF13", "FF04", "FF05", "FF06"]]],
            'N': [[['D', 'R', 'F'],['DF15', 'DF00', 'DF01', 'RF01', 'RF02', 'RF03', 'FF14', 'FF15', 'FF16']]],
            'F': [[['U', 'F', 'R'],['UF03', 'UF04', 'UF05', 'FF11', 'FF12', 'FF13', 'RF04', 'RF05', 'RF06']]],
            'B': [[['U', 'B', 'L'],['UF11', 'UF12', 'UF13', 'BF11', 'BF12', 'BF13', 'LF04', 'LF05', 'LF06']]],
            'J': [[['D', 'F', 'L'],['DF11', 'DF12', 'DF13', 'FF01', 'FF02', 'FF03', 'LF14', 'LF15', 'LF16']]],
            'R': [[['U', 'R', 'B'],['UF15', 'UF00', 'UF01', 'RF11', 'RF12', 'RF13', 'BF04', 'BF05', 'BF06']]],
            'I': [[['L', 'B', 'D'],['LF01', 'LF02', 'LF03', 'BF14', 'BF15', 'BF16', 'DF07', 'DF08', 'DF09']]],
            'X': [
                [['U', "D"],[
                    "UF00","UF01","UF02","UF03","UF04","UF05","UF06","UF07","UF08","UF09","UF10","UF11",
                    "UF12","UF13","UF14","UF15","UF16","UF17","UF18","UF19","UF20","UF21","UF22","UF23",
                    "UF24",
                    "DF00","DF01","DF02","DF03","DF04","DF05","DF06","DF07","DF08","DF09","DF10","DF11",
                    "DF12","DF13","DF14","DF15","DF16","DF17","DF18","DF19","DF20","DF21","DF22","DF23",
                    "DF24"
                ]],    
                [["F", "B"],[
                    "FF00","FF01","FF02","FF03","FF04","FF05","FF06","FF07","FF08","FF09",
                    "FF10","FF11","FF12","FF13","FF14","FF15","FF16","FF17","FF18","FF19","FF20",
                    "BF10","BF11","BF12","BF13","BF14","BF15","BF16","BF17","BF18","BF19",
                    "BF00","BF01","BF02","BF03","BF04","BF05","BF06","BF07","BF08","BF09","BF20"
                ]],
                [["L"],[
                    "LF00","LF10","LF01","LF11","LF02","LF12","LF03","LF13","LF04","LF14",
                    "LF05","LF15","LF06","LF16","LF07","LF17","LF08","LF18","LF09","LF19","LF20","LF20"
                ]],
                [["R"],[
                    "RF00","RF10","RF01","RF11","RF02","RF12","RF03","RF13","RF04","RF14",
                    "RF05","RF15","RF06","RF16","RF07","RF17","RF08","RF18","RF09","RF19","RF20","RF20"
                ]]],
            'Y': [
                [['U', "D"],[
                    "UF00","UF01","UF02","UF03","UF04","UF05","UF06","UF07","UF08","UF09","UF10","UF11",
                    "UF12","UF13","UF14","UF15","UF16","UF17","UF18","UF19","UF20","UF21","UF22","UF23",
                    "UF24",
                    "DF08","DF09","DF10","DF11","DF12","DF13","DF14","DF15","DF00","DF01","DF02","DF03",
                    "DF04","DF05","DF06","DF07","DF20","DF21","DF22","DF23","DF16","DF17","DF18","DF19",
                    "DF24"


                ]],
                [["L", "R"],[
                    "LF00","LF01","LF02","LF03","LF04","LF05","LF06","LF07","LF08","LF09",
                    "LF10","LF11","LF12","LF13","LF14","LF15","LF16","LF17","LF18","LF19",
                    "LF20",
                    "RF10","RF11","RF12","RF13","RF14","RF15","RF16","RF17","RF18","RF19",
                    "RF00","RF01","RF02","RF03","RF04","RF05","RF06","RF07","RF08","RF09",
                    "RF20"
                ]],
                [["F"],[
                    "FF00","FF10","FF01","FF11","FF02","FF12","FF03","FF13","FF04","FF14",
                    "FF05","FF15","FF06","FF16","FF07","FF17","FF08","FF18","FF09","FF19","FF20","FF20"
                ]],
                [["B"],[
                    "BF00","BF10","BF01","BF11","BF02","BF12","BF03","BF13","BF04","BF14",
                    "BF05","BF15","BF06","BF16","BF07","BF17","BF08","BF18","BF09","BF19","BF20","BF20"
                ]]], 
            'Z': [
                [["U"],[
                    "UF00","UF08","UF01","UF09","UF02","UF10","UF03","UF11","UF04","UF12","UF05","UF13",
                    "UF06","UF14","UF07","UF15","UF16","UF20","UF17","UF21","UF18","UF22","UF19","UF23",
                    "UF24","UF24"]],
                [["D"],[
                    "DF00","DF08","DF01","DF09","DF02","DF10","DF03","DF11","DF04","DF12","DF05","DF13",
                    "DF06","DF14","DF07","DF15","DF16","DF20","DF17","DF21","DF18","DF22","DF19","DF23",
                    "DF24","DF24"]],
                [["L","R"],[
                    "LF00","LF01","LF02","LF03","LF04","LF05","LF06","LF07","LF08","LF09",
                    "LF10","LF11","LF12","LF13","LF14","LF15","LF16","LF17","LF18","LF19",
                    "LF20",
                    "RF00","RF01","RF02","RF03","RF04","RF05","RF06","RF07","RF08","RF09",
                    "RF10","RF11","RF12","RF13","RF14","RF15","RF16","RF17","RF18","RF19",
                    "RF20"]],
                [["B","F"],[
                    "BF00","BF01","BF02","BF03","BF04","BF05","BF06","BF07","BF08","BF09",
                    "BF10","BF11","BF12","BF13","BF14","BF15","BF16","BF17","BF18","BF19",
                    "BF20",
                    "FF00","FF01","FF02","FF03","FF04","FF05","FF06","FF07","FF08","FF09",
                    "FF10","FF11","FF12","FF13","FF14","FF15","FF16","FF17","FF18","FF19",
                    "FF20"
                ]]]
        }};
    jQuery.each( turnTable["layer1"], function(i,v){
        if( turnTable["layer2"][i] == undefined ) {
            turnTable["layer2"][i] = v;
        }
    });
//    turnTable["layer2"]["X"] = turnTable["layer1"]["X"];
//    turnTable["layer2"]["Y"] = turnTable["layer1"]["Y"];
//    turnTable["layer2"]["Z"] = turnTable["layer1"]["Z"];

    var getTargetSticker = function(turnOperation){
        var operation = parseTurnOperation( turnOperation );
        var processAry = turnTable["layer" + operation["layer"]][operation["turn"]]; // [[],[]] ....

        var order = [];
        var targetStickers = [];
        jQuery.each(processAry, function(pcsIdx, process) {
            var targetAry = process[0];
            var turnLabel = process[1];

            order[pcsIdx] = [];
            if( !operation["isPrime"] ) {
                for ( var index = 0 ; index < targetAry.length; index++ )order[pcsIdx].push( targetAry[index] );
            } else {
                for ( var index = targetAry.length - 1; index >= 0; index-- )order[pcsIdx].push( targetAry[index] );
            }
            for( var i = 0; i < turnLabel.length; i++ ){
                if( targetStickers[pcsIdx] == undefined) {
                    targetStickers[pcsIdx] = {};
                }
                if( targetStickers[pcsIdx][turnLabel[i][0]] == undefined )
                    targetStickers[pcsIdx][turnLabel[i][0]] = [];
                targetStickers[pcsIdx][turnLabel[i][0]].push(turnLabel[i]);
            }
        });

        return { "stickers":targetStickers, "order":order };
    };

    var turnExecuteEnd = function(shadow){
        var home = shadow.className.animVal.split(" ")[1];
        var $home = $('#faces>svg:not(.shadow).' + home);

        var orderAry = currentTargetStickers["order"];
        var stickersAry = currentTargetStickers["stickers"];
        var preFace = home;
        var afterFace = "";
        for( var i = 0; i < orderAry.length; i ++ ) {
            var order = orderAry[i];
            var stickers = stickersAry[i];
            var tmpIndex = order.indexOf( preFace );
            if( tmpIndex == -1 ) continue;
            var len = order.length;
            if( len == 1 ) {
                afterFace = preFace;
                jQuery.each( $(shadow).children(),function(){
                    var preLabel = this.className.animVal;
                    var preIndex = stickers[preFace].indexOf( preLabel );
                    var afterIndex = (preIndex % 2 == 0) ? preIndex + 1 : preIndex - 1;
                    var afterLabel = stickers[afterFace][afterIndex];

                    var $pre = $('#faces>svg>path.' + preLabel);
                    $pre.attr('fill',currentState[afterLabel]);
                    $home[0].appendChild( this );
                });
                // 1面だけの入れ替え.
            } else { // 2面に渡る入れ替え.
                var adjIndex = tmpIndex % len;
                var adjIndex2 = (adjIndex + 1) % len ;
                adjIndex2 += (tmpIndex >= len) ? len : 0;
                afterFace = order[ adjIndex2 ];

                jQuery.each( $(shadow).children(),function(){
                    var preLabel = this.className.animVal;
                    var index = stickers[preFace].indexOf( preLabel );
                    var afterLabel = stickers[afterFace][index];

                    var $pre = $('#faces>svg>path.' + preLabel);
                    $pre.attr('fill',currentState[afterLabel]);
                    $home[0].appendChild( this );
                });
            }
        };

        that.checkComplete();
        //$(shadow).addClass('hide');
    };

    var currentState = {};
    var backUpCurrentState = function(){
        var $target = $('#faces>svg:not(shadow)>path');
        jQuery.each( $target, function(){
            currentState[ this.className.animVal ] = $(this).attr('fill');
        });
    }

    var isEmpty = function (hash) {
        for ( var i in hash ) return false;
        return true;
    }

    var that = {
        generateFaces: function(){
            for( var faceNum = 0; faceNum < faceName.length; faceNum ++ ){
                var $svg = $('<svg class="face ' + faceName[faceNum] +'"></svg>');
                var $shadow = $('<svg class="face ' + faceName[faceNum] + ' shadow"></svg>');
                var svgData = generateFaceType[faceName[faceNum]];
                for( var i = 0; i < svgData.length; i++ ) {
                    var svgNS = "http://www.w3.org/2000/svg";
                    var c = document.createElementNS(svgNS, "path");
                    var name = faceName[faceNum];
                    c.setAttribute("fill", faceColor[name]);
                    c.setAttribute("d", svgData[i]);
                    c.setAttribute('class', name + "F" + ("00" + i).slice(-2));
                    c.setAttribute("style", "position:absolute");
                    $svg[0].appendChild( c );

                }
                $faces[0].appendChild( $svg[0]);
                $faces[0].appendChild( $shadow[0]);
            }
        },
        getOperation: function(faceName){
            var currentPosAry = facePosition[faceName];
            var cssOpe =
                'rotateZ(' + currentPosAry[0] + 'deg)' +
                    'rotateY(' + currentPosAry[1] + 'deg)' +
                    'rotateX(' + currentPosAry[2] + 'deg)' +
                    'translate3d(' +
                    currentPosAry[3][0] + 'px,' +
                    currentPosAry[3][1] + 'px,' +
                    currentPosAry[3][2] * mag + 'px)' +
                    "scale3d(" + mag / 200 + ',' + mag / 200 + ',' + mag / 200 + ')';
            return cssOpe;
        },
        setPosition: function() {
            var planes = $faces.children();
            for( var i = 0; i < planes.length; i ++ ) {
                var currentFaceName = $(planes[i]).attr('class').split(" ")[1];
                var cssOpe = that.getOperation( currentFaceName );
                $(planes[i])
                    .css('-webkit-transform-origin', "50% 50%")
                    .css('-moz-transform-origin', "50% 50%")
                    .css('-ms-transform-origin', "50% 50%")
                    .css('-o-transform-origin', "50% 50%")
                    .css('-webkit-transform',cssOpe)
                    .css('-moz-transform',cssOpe)
                    .css('-ms-transform',cssOpe)
                    .css('-o-transform',cssOpe);
            }
        },
        getAvailableTurns: function(){
            return availableTurn;
        },
        turnExecute: function(turnOperation){  //F1P
            var $shadow = $('.shadow');
            // 回転中に次の回転命令がきた場合。アニメーションを停止して終了処理を実行.
            if( currentOperation != "") {
                jQuery.each( $shadow, function(i,shadowPlane){
                    var name = shadowPlane.className.animVal.split(' ')[1];
                    clearInterval( currentAnimation[name]["time"] );
                    $(shadowPlane)
                        .css('-webkit-transform',currentAnimation[name]["matrix"])
                        .css('-moz-transform',currentAnimation[name]["matrix"])
                        .css('-ms-transform',currentAnimation[name]["matrix"])
                        .css('-o-transform',currentAnimation[name]["matrix"]);
                    turnExecuteEnd(shadowPlane);
                });
                currentOperation = turnOperation;
                currentAnimation = {};
                currentState = {};
                $shadow.addClass('hide');
            }
            $shadow.removeClass('hide');

            backUpCurrentState(); // 現在の色のリストを取得.
            currentOperation = turnOperation;
            currentTargetStickers = getTargetSticker(currentOperation);
            var targetStickersAry = currentTargetStickers["stickers"];
            jQuery.each( $shadow, function(i,val){
                var currentFaceName = this.className.animVal.split(" ")[1];
                jQuery.each( targetStickersAry, function(i,targetStickers){
                    if( targetStickers[currentFaceName] != undefined) {
                        for( var i = 0; i < targetStickers[currentFaceName].length; i++ ){
                            try {
                                val.appendChild( $('#faces>svg>path.' + targetStickers[currentFaceName][i])[0]);
                            } catch(e) {
                                console.log(e);
                            }
                        }
                    }
                });
            });

            var operation = parseTurnOperation( currentOperation );
            var axes = turnAxes[operation["turn"]]["axis"];
            var axisOffset = turnAxes[operation["turn"]]["offset"];
            var rotateDeg = turnAxes[operation["turn"]]["rotate"];
            jQuery.each( $shadow, function(i,shadowPlane){
                var currentFaceName = $(this).attr('class').split(" ")[1];
                var matrix = that.getOperation( currentFaceName );

                var rotate = 0;
                var name = shadowPlane.className.animVal.split(' ')[1];
                var isPrime = operation["isPrime"];
                //console.log( "axisOffset :" + axisOffset[1]);
                var axOffsetPre = 'translate3d('+
                    axisOffset[0]+'px,'+
                    axisOffset[1]+'px,'+
                    axisOffset[2]+'px) ';
                var axOffsetAfter = 'translate3d('+
                    -axisOffset[0]+'px,'+
                    -axisOffset[1]+'px,'+
                    -axisOffset[2]+'px) ';
                var frameRate = 33;
                var meanTime = 0.5;
                var time = setInterval(function(){
                    if( isPrime ) {
                        rotate -= rotateDeg / frameRate / meanTime;
                    } else {
                        rotate += rotateDeg / frameRate / meanTime;
                    }

                    if( Math.abs(rotate) < rotateDeg ) {
                        var operation = axOffsetPre +
                            "rotate3d(" + axes + "," + rotate + "deg) " +
                            axOffsetAfter + matrix;

                        $(shadowPlane)
                            .css('-webkit-transform',operation)
                            .css('-moz-transform',operation)
                            .css('-ms-transform',operation)
                            .css('-o-transform',operation);
                    } else {
                        $(shadowPlane)
                            .css('-webkit-transform',matrix)
                            .css('-moz-transform',matrix)
                            .css('-ms-transform',matrix)
                            .css('-o-transform',matrix);
                        clearInterval( time );
                        turnExecuteEnd(shadowPlane);
                        delete currentAnimation[name];
                        if( isEmpty( currentAnimation ) ) {
                            currentOperation = "";
                        }
                    }
                },frameRate);
                currentAnimation[name] = {"time":time,"matrix":matrix};
            });
        },
        checkComplete: function(){
            var isComplete = true;
            var $planes = $('#faces>svg:not(.shadow)');
            for( var i = 0; i < $planes.length; i ++ ){
                var $stickers = $planes.eq(i).children();
                if( $stickers.length == 0) {
                    isComplete = false; return;
                }
                var color = $stickers.eq(0).attr('fill');
                for( var j= 0; j < $stickers.length; j++ ){
                    if( color != $stickers.eq(j).attr('fill') ) {
                        isComplete = false;
                        break;
                    }
                }
                if( !isComplete ) break;
            }
            if( isComplete ){
                $('#hint').removeClass('off');
            } else {
                $('#hint').addClass('off');
            }
            return isComplete;
        },
        scramble: function(){
            if( that.checkComplete() ) {
                for( var i = 0; i < 100; i++ ){
                    var rand = Math.floor(Math.random()*availableTurn.length);
                    var targetTurn = availableTurn[rand];
                    var prime =  ((Math.floor(Math.random()*2) % 2) == 0) ? "P":"";
                    var layer =  ((Math.floor(Math.random()*2) % 2) == 0) ? "1":"2";
                    that.turnExecute( targetTurn + layer + prime );
                }
            }
        },
        setMagnification: function( magnification ) {
            mag = magnification;
            that.setPosition();
        }
    }
    return that;
}

var Control = function(turns){
    var store = new Persist.Store('state');

    var availableKeys = {
        65:"A",66:"B",67:"C",68:"D",69:"E",70:"F",71:"G",72:"H",73:"I",74:"J",75:"K",76:"L",77:"M",78:"N",79:"O",80:"P",
        81:"Q",82:"R",83:"S",84:"T",85:"U",86:"V",87:"W",88:"X",89:"Y",90:"Z",44:",",190:".",47:"/", 7:"'",187:";",27:"ESC",
        48:"0",49:"1",50:"2",51:"3",52:"4",53:"5",55:"6",56:"7","57":"8",59:"9"};
    // 色の初期設定.
    var colorList = {
        'U':"#FFFFFF",
        'F':"#FF0000",
        'L':"#008800",
        'B':"#8833ff",
        'R':"#ffff00",
        'D':"#0033ff"
    }
    var keyTable = {  };

    var availableTurns = turns;

    var generateSelection = function($target, name){
        var $button = $('<button/>');
        $button.html(name)
            .attr('type','button')
            .css('width','50px')
            .css('height','50px');
        $target.append($button);
        var $select = $('<select/>');
        $select.attr('name',name)
            .css('width','80px')
            .css('height','50px');

        var $option = $('<option/>');
        $option.attr('value',-1).html('none'); // .attr('selected',"")
        $select.append($option);

        jQuery.each( availableKeys, function(keyCode,letter){
            var $option = $('<option/>');
            $option.attr('value',keyCode).html(letter);
            if( name[0] == letter && name[1] != "P") {
                keyTable[name] = name.charCodeAt(0);
                $option.attr('selected','');
            }
            $select.append($option);
        });

        $target.append($select);
    }

    var isShow = true;

    var that = {
        generateKeys: function(){
            var $keys = $('#keys');
            jQuery.each( availableTurns, function(i,val){
                generateSelection( $keys, val );
                generateSelection( $keys, val + "P" );
                $keys.append($('<br/>'));
            });
            generateSelection( $keys, "Minus" );
            $keys.append($('<br/>'));
            generateSelection( $keys, "Plus" );
            $keys.append($('<br/>'));
        },
        eventBind: function(){
            // show/hideボタン.
            $("button[name='toggle']").click(function(){
                $('#panel').slideToggle();
                if( isShow ) {
                    isShow = false;
                    setTimeout(function(){
                        $('#control').css('background','rgba(0,0,0,0.0)');
                    },500);
                } else {
                    isShow = true;
                    $('#control').css('background','rgba(0,0,0,0.5)');
                }
            });

            // キーバインド設定 -----------------------------------
            $('select[name!="faceColor"]').change(function() {
                keyTable[this.name] = parseInt(this.value);
                var keyTableString = "";
                jQuery.each(keyTable, function (i, v) {
                    keyTableString += i + ':' + v + ',';
                });
                store.set('keyBindSetting', keyTableString.slice(0,-1));
            });


            // 色変更 -------------------------------------------------
            $('select[name="faceColor"]').change(function() {
                $('#colorSelector div').css('background-color', colorList[this.value]);
                $('#colorSelector').ColorPicker({ color:colorList[this.value]});
            });

            var rgbTo16 = function(col){
                return "#" + col.match(/\d+/g).map(function(a){return ("0" + parseInt(a).toString(16)).slice(-2)}).join("");
            }
            $('.colorpicker_submit').click(function(){
                var newBg = $('#colorSelector div').css('background-color');
                var faceType = $('select[name="faceColor"]').val();
                $('#faces>svg:not(.shadow).'+faceType+'>path')
                    .attr('fill',rgbTo16(newBg));
                colorList[faceType] = rgbTo16(newBg);
                var ColorListString = "";
                jQuery.each(colorList, function (i, v) {
                    ColorListString += i + ':' + v + ',';
                });
                store.set('colorSetting', ColorListString);
            });

            // [view range].
            var viewRange = 1200;
            $('#viewRange').change(function(){
                viewRange = parseInt( this.value);
                $('#cubeViewPort')
                    .css('-webkit-perspective',viewRange + 'px')
                    .css('-moz-perspective',viewRange + 'px')
                    .css('-ms-perspective',viewRange + 'px')
                    .css('-o-perspective',viewRange + 'px');

            })

            // [back face].
            $('#backFace').click(function(){
                var ope = "";
                if( this.checked ) {
                    ope = 'visible';
                } else {
                    ope = 'hidden';
                }
                $('.face').css('-webkit-backface-visibility',ope)
                    .css('-moz-backface-visibility',ope)
                    .css('-ms-backface-visibility',ope)
                    .css('-o-backface-visibility',ope);
            })
        },
        restoreLastSettings: function(){
            // キーボード設定.
            //store.set('keyBindSetting');
            store.get('keyBindSetting', function(ok, val) {
                if (ok) {
                    if( val != null) {
                        //keyTable = {  };
                        try {
                            var tmpAry = val.split(',');
                            jQuery.each( tmpAry, function(i,v){
                                var tmp = v.split(':');
                                if( isFinite(tmp[1]) ) { // 数値であれば.
                                    keyTable[tmp[0]] = parseInt(tmp[1]);
                                    var $update = $('select[name=' + tmp[0] +']');
                                    //if( $update.val() == "-1") {
                                        $update.val( tmp[1]);
                                    //}
                                }
                            });
                        } catch (e) {
                            keyTable = {};
                        }
                    }
                }
            });

            // 色設定.
            store.get('colorSetting', function(ok, val) {
                if (ok) {
                    if( val != null) {
                        jQuery.each( val.split(','), function(i,v){
                            var tmp = v.split(':');
                            colorList[tmp[0]] = tmp[1];
                            if( tmp[0] != "") {
                                var $target = $('#faces>svg.'+tmp[0]).children();
                                jQuery.each( $target, function(){
                                    $(this)
                                        .attr('fill', tmp[1])
                                        .attr('stroke', "#000000");
                                })
                            }
                        });
                    } else {
                        jQuery.each( colorList, function(name,hex){
                            var $target = $('#faces>svg.'+name).children();
                            jQuery.each( $target, function(){
                                $(this)
                                    .attr('fill', hex)
                                    .attr('stroke', "#000000");
                            })
                        })
                    }
                }
            });

        },
        getTurnName: function(keyCode){
            var turnName = "";
            jQuery.each( keyTable, function(i,v){
                if ( v == keyCode ) {
                    turnName = i;
                }
            });
            return turnName;
        }
    }
    return that;
};

var LayerControl = function(){
    var levels = ["outer","inner"];
    var min = 1;
    var max = 2;
    var currentLayer = min;

    var that = {
        plus: function(){
            currentLayer ++;
            currentLayer = ( currentLayer < max ) ? currentLayer: max;
            $('#layer span').html(levels[currentLayer-1]);
        },
        minus: function(){
            currentLayer --;
            currentLayer = ( min > 1 ) ? min : 1;
            $('#layer span').html(levels[currentLayer-1]);
        },
        getValue: function(){
            return currentLayer;
        }
    }
    return that;
}

var WindowControl = function(){
    // 回転時処理---------------------------------------------------
    document.querySelector('#cubeViewPort').addEventListener("mousemove", mouseOver, false);
    var lastX =  315 + 270, offsetX = 0; // + 270
    var lastY = -35  - 20, offsetY = 0; // + 20
    function mouseOver(e){
        var y = (e.pageX - offsetX) * 1 + 90,
            x = (e.pageY - offsetY) * -1 - 90;

        if( $('#rotate').attr('checked') ){
            rotate(x,y,0);
            lastX = e.pageX - offsetX;
            lastY = e.pageY - offsetY;
        }
    }
    // 回転実処理------------------------------------------------------------
    function rotate(newX,newY,newZ){
        var x = parseInt((newX || 0)),
            y = parseInt((newY || 0));
        cube = document.getElementById('faces');

        var operation = "rotateX(" + x + "deg) rotateY(" + y + "deg)";
        cube.style.webkitTransform = operation;
        cube.style.MozTransform     = operation;
        cube.style.MSTransform      = operation;
        cube.style.OTransform       = operation;
    }
    // キューブがクリックされたとき最後のクリック位置情報からoffsetを取得
    $('#cubeViewPort').click(function(e){
        $('#rotate').trigger('click');
        offsetX = e.pageX - lastX;
        offsetY = e.pageY - lastY;
    }).css('cursor','pointer');

    var that = {
        updateLayout: function(){
            var len = 200 * 2;
            $('#faces').css('width',len).css('height',len);
            $('#hint').css('width',len);

            var winWidth = $(window).width();
            var leftMargin = Math.floor( (winWidth - len) / 2 / winWidth * 100 );
            $('#cubeContainer').css('left',leftMargin + '%');
            var winHeight = $(window).width();
            var topMargin = Math.floor( (winHeight - len) / 2 / winHeight * 100 );
            $('#cubeContainer').css('top',topMargin/2 + '%');
        }
    };
    return that;
}

jQuery(function(){
    var cube = Cube();
    cube.generateFaces();
    cube.setPosition();

    var control = Control(cube.getAvailableTurns());
    control.generateKeys();
    control.restoreLastSettings();
    control.eventBind();

    var layerCtrl = LayerControl();
    var windowCtrl = WindowControl();

    var parseTurnName = function (turnName, isShift) {
        if( turnName == "") return;
        if( turnName.match('Minus') != null) {
            layerCtrl.minus();
            return;
        }
        if( turnName.match('Plus') != null) {
            layerCtrl.plus();
            return;
        } else {
            var turn = turnName[0];
            var prime = ( turnName[1] != undefined) ? turnName[1] : "";
            prime = (isShift && prime == "") ? "P" : "";
            cube.turnExecute( turn + layerCtrl.getValue() + prime);
        }

        cube.checkComplete();
    }

    $('body').keyup(function(e){
        console.log(e.which);
        if(e.which == 32) { // spaceのとき
            cube.scramble();
            cube.checkComplete();
        }
        var isShift = (e.shiftKey) ? true : false;

        var turnName = control.getTurnName(e.which);
        parseTurnName(turnName, isShift);
    });


    $('#keys>button').click(function(){
        parseTurnName( $(this).html() );
    });

    $('#mag').change(function(){
        var mag = parseInt( this.value );
        cube.setMagnification( mag );
    });

    // ウインドウリサイズ時のイベント.
    jQuery.bind("resize",windowCtrl.updateLayout());

    // リセットボタン --------------------------
    $("button[name='reset']").click(function(){
        control.restoreLastSettings();
        $('#hint').removeClass('off');
    });

    // faceBookのコメントを縮小.
    $('button[name="hide"]').click(function(){
        $('.fb-comments').slideToggle();
    });

    // debug.
    var barNum = 0;
    $('svg:not(.shadow)>path').mouseover( function(){
        console.log( this.className.animVal + "------------------------------" );
    });
});